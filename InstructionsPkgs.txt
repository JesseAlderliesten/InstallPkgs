#### Introduction ####
This file contains information on installing and getting information about R
packages. It also details methods to obtain the source code of R functions. A
package is a standardized collection of material extending R, e.g. providing
code, data, or documentation (R FAQ 7.29). After a package is installed, you
need to run library(packagename). This loads the package (i.e., makes it
available in the memory) and adds it to the search path such that the computer
knows where to look for the functions contained in the package.


#### Information about not-yet-installed R packages ####
A PDF with all help files of the standard and recommended R packages is
available at https://cran.r-project.org/doc/manuals/r-release/fullrefman.pdf.
The manuals and help pages of all CRAN packages can be searched from
https://search.r-project.org/, which can also be accessed from within R using
utils::RSiteSearch().

The source code of base R packages can be obtained from GitHub (see the section
'Getting the source code' below), and the installation pages of add-on packages
on CRAN frequently contain links to the GitHub pages of packages where the
source code can be viewed.


#### Obtaining packages from repositories ####
R packages can be obtained from various repositories, which commonly have
thematic selections of packages as well:
- Bioconductor: https://bioconductor.org/
  (thematic: https://bioconductor.org/packages/release/BiocViews.html#___Software)
- CRAN: https://cran.r-project.org/web/packages/index.html
  (thematic: https://cran.r-project.org/web/views/; to install or update all
  core packages from a CRAN taskview, install package 'ctv' and run
  ctv::install.views("taskviewname", coreOnly = TRUE) or
  ctv::update.views("taskviewname", coreOnly = TRUE), respectively; see also the
  section 'CRAN mirrors' below). CRAN packages that have been recently archived
  are available at https://www.cranhaven.org/.
- Neuroconductor: https://neuroconductor.org/list-packages/all
- R-Forge: https://r-forge.r-project.org/
  (thematic: https://r-forge.r-project.org/softwaremap/trove_list.php)
- rOpenSci: https://ropensci.org/packages/all/
  (thematic: https://ropensci.org/packages/)
- R universe: https://r-universe.dev/search

In addition, many R packages are available from GitHub (https://github.com/).


#### CRAN mirrors ####
A list of CRAN mirrors (i.e., websites hosted in various parts of the world with
the same content as the main CRAN website) is available at
https://cran.r-project.org/mirrors.html. Information about the status of the
mirrors is available at https://cran.r-project.org/mirmon_report.html and in the
function getCRANmirrors() from the R-package 'utils'.


#### Installing older versions of a package ####
To get the version number of an installed package, use
utils::packageVersion("packagename").

Installing an old version of a package usually requires installation of RTools
to build the packages from source, see the section 'Installing and configuring
Rtools' in the file 'InstallR.txt'.

The function 'install_version()' from the 'remotes' package can be used to
install an old version of a package:
remotes::install_version("ggplot2", version = "3.4.4", upgrade = "ask").

Alternatively, for CRAN packages, obtain the URL pointing to the desired version
at its CRAN page at 'Downloads > Old sources > pkg archive' and use that URL:
install.packages("https://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_3.4.4.tar.gz",
lib = lib, repos = NULL, type = "source").

Older versions of Bioconductor packages can be found by visiting the appropriate
version of bioconductor, e.g., https://bioconductor.org/packages/3.19/BiocViews.html
(see https://bioconductor.org/about/release-announcements/ for a list of
Bioconductor versions with the corresponding R version).

Versions of CRAN R packages can be compared with diffify (https://diffify.com/R)
and a chronological overview of changes in CRAN packages is available at
CRANberries: https://dirk.eddelbuettel.com/cranberries/.


#### Information about already-installed R packages ####
Information on a package and its functions is available from within R after the
package has been installed and loaded (i.e., library(packagename) has been run):
- Help page of a package: help("packagename")
- List package functions: ls(getNamespace("packagename"))
- Display installed package version: utils::packageVersion("packagename")

Information about functions, methods, and classes can also be obtained (see also
the section 'Getting the source code' below):
- Help page of a function: help("functionname")
  To distinguish between functions from different packages:
  help("||", package = "lme4").
- List of function arguments: args("functionname")
- List of methods that have been defined for a generic class:
  methods(class = "classname")
  attr(methods(class = "classname"), "info") for S3-methods and
  showMethods(classes = "classname", where = getNamespace("packagename")) for
  S4-methods.
- List of methods that have been defined for a generic function:
  methods("functionname").
- List of objects (including functions) whose name contains a certain string:
  apropos("functionname").

Information about the citation of packages is available through
citation("packagename"), with citation() to cite R itself.


#### Getting the source code ####
Partly based on Ligges U. 2006. Accessing the sources. RNews 6(4):43-45 and
https://stackoverflow.com/a/19226817

The source code of the base R packages is available at
https://svn.r-project.org/R/trunk/, but searching the code is easier using the
GitHub mirror https://github.com/r-devel/r-svn/. The source code of BioConductor
packages is available at https://code.bioconductor.org/. The source of the other
R-packages is available from an unofficial CRAN mirror at https://github.com/cran.

The simplest way to obtain the source code of a function is typing the name of
the function, without the brackets. E.g., sd returns function (x, na.rm = FALSE) 
sqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x), na.rm = na.rm)).
A more robust alternative is using getAnywhere("functionname"): that function
looks in more places. Although the quotes around the function name are not
necessary when looking for normal functions, they are required when looking for
the source code of operators such as ||, such that it is most robust to use them
throughout.

If getAnywhere("functionname") returns UseMethod("functionname") instead of the
source code, the function is S3-generic and has different methods for different
object classes. Use methods("functionname") to get an overview of the available
methods and then obtain the source code of a particular method using
getAnywhere("function.class"), where function.class is an item from the overview
returned by methods("functionname"). For example, getAnywhere("mean") returns
function (x, ...) UseMethod("mean") and methods("mean") returns mean.Date,
mean.default, and several other methods. Then getAnywhere("mean.default") and
getAnywhere("mean.Date") return the source code for the default method and the
method used with objects of class 'Date', respectively.

If getAnywhere("functionname") returns standardGeneric("functionname") instead
of the source code, the function is an S4-function and has different methods for
different object classes. Use showMethods(functionname) to get an overview of
the available methods (or pkgname:::functionname to get an overview of the
available methods from package pkg) and the obtain the source code of a
particular method using getMethod("pkgname", "functionname"). For example, if
the Matrix package is installed and loaded (i.e., library(Matrix) has been
used), getAnywhere("all.equal") returns matches for package Matrix and for
package base. Selecting the match from package Matrix (i.e.,
getAnywhere("all.equal")[1]) returns, among others, standardGeneric("all.equal")
indicating that 'all.equal' is an S4 function. Using showMethods("all.equal")
gives an overview of the different methods. Then provide the function name as
argument 'f' and the entire line of the selected method as argument 'signature'
to function getMethod() to get the source code:
getMethod(f = "all.equal", signature = c(target = "vector", current = "Matrix")).

If getAnywhere("functionname") returns '.Internal' or '.Primitive', the function
is internal or primitive. Look for the function name in the first column (which
gives the name of the R function) of the file src/main/names.c to find the
appropriate c-entry which is given in the second column of that file. Then
search for that c-file in src/main to locate the file with the source code. For
example, getAnywhere("matrix") shows, among others, the line
'.Internal(matrix(data, nrow, ncol, byrow, dimnames, missing(nrow), missing(ncol)))'.
The file src/main/names.c has as entry with 'matrix' in the first column:
{"matrix",	do_matrix,	0,	11,	7,	{PP_FUNCALL, PREC_FN,	0}}
Searching src/main for do_matrix gives file 'array.c' as one of its results.
That file contains the source code of 'matrix'. Similarly, getAnywhere("log10")
shows 'function (x)  .Primitive("log10")'. The file src/main/names.c has as
entry with 'log10' in the first column:
{"log10",	do_log1arg,	10,	1,	1,	{PP_FUNCALL, PREC_FN,	0}}
Searching src/main for do_log1arg gives file 'arithmetic.c' as one of its
results. That file contains the source code of 'log10'.


#### Troubleshooting ####
Note that package names are case-sensitive.

If errors occur when loading packages that require Java, make sure the 64-bit
version of Java is installed on 64-bit PCs. The different Java versions are
available at https://www.java.com/download/manual.jsp.
