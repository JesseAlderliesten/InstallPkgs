#### Introduction ####
This file provides information on setting up and using Git and GitHub on Windows.


#### Setting up Git and GitHub ####
Create a GitHub account at https://github.com/, download a GitHub client from
https://git-scm.com/download or from https://gitforwindows.org/ and install it.
To update the Git for Windows GitHub client if you already have it, type
'git\update-git-for-windows' in the shell.

To use Git and GitHub from RStudio: in RStudio at 'Tools > Global Options >
Git/SVN', tick 'Enable version control interface for RStudio projects'. The Git
executable is at C:/Program Files/Git/bin/git.exe.

Open the Git Bash shell (which was installed when installing Git for Windows)
by typing ‘Git Bash’ + Enter in the Windows start menu.
To associate Git with your GitHub account, you need to provide your name
(this name is listed in GitHub with the changes you make and does NOT have to
be your GitHub username), and the email associated with your GitHub account.
See https://happygitwithr.com/hello-git.html for more details.
git config --global user.name 'Jane Doe'
git config --global user.email 'jane@example.com'
git config --global --list
The last line should return the username and email address you just entered.

Also see https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens
and https://happygitwithr.com/https-pat.html on the use of personal access
tokens (PATs) instead of a username and password.


#### Documentation ####
- Git documentation: https://git-scm.com/doc
- GitHub help page: https://docs.github.com/en
- GitHub help page on setting up GitHub:
  https://docs.github.com/en/get-started/git-basics/set-up-git
- Happy Git and GitHub for the useR, by Jennifer Bryan:
  https://happygitwithr.com/index.html
- RStudio help page about version control:
  https://support.posit.co/hc/en-us/articles/200532077-Version-Control-with-Git-and-SVN-in-the-RStudio-IDE
- RStudio User Guide: https://docs.posit.co/ide/user/
- Pro Git Book, by Scott Chacon and Ben Straub: https://git-scm.com/book/en/v2


#### Using Git and GitHub ####
To work with GitHub in RStudio, you should NOT open an R script, but instead
open the R Project file (i.e., with extension .Rproj). Then the Git menu will be
visible.

Pull to get changes from the remote directory (i.e., GitHub) incorporated in the
local directory (i.e., your computer), and handle any conflicts to get the local
directory up-to-date with the remote directory:
- in RStudio: use the pull button (downward arrow) in the Git menu
- in the shell: git pull https://github.com/UserName/RepositoryName
  (UserName/RepositoryName has to be replaced with the relevant names)

Save the modified file after you have made some changes, only then will the name
of the file appear in the Git menu of RStudio to review changes:
- in RStudio: check the checkbox in front of the relevant filename, use the Diff
  button in the Git menu to get an overview of the changes to the file, describe
  the changes in the box 'Commit message', and use the Commit button. Pull again
  (downward arrow) to make sure the local file is up-to-date, and handle any
  conflicts. Then push (upward arrow) to incorporate the changes in the remote
  directory.
- in the shell: to compare the content of two files, see the instructions in
  section 'Comparing files using the shell' below. Next, to commit changes, use:
  git commit -m 'your commit message goes here' path/and/filename.R
  git push https://github.com/UserName/RepositoryName
  (UserName/RepositoryName has to be replaced with the relevant names)

If pushing leads to an error because of an invalid username/password, push
again, then you will be asked for a personal access token (PAT). After you have
entered the PAT once, RStudio will remember this token for next times.


#### Comparing files ####
Output files can be compared using tools::Rdiff().

R-scripts can be compared using the Bash shell: open the Bash shell and copy the
file names (including the paths) of the two files to be compared into the shell
on the same line, and press Enter:
git diff --no-index 'path/and/filename_file1.R' 'path/and/filename_file2.R'

Notes:
- The two paths should be on the same line, i.e., not separated by a newline.
- Using quotes ('') around the paths ensures this also works when they contain
  spaces.
- The flag --no-index makes it possible to compare files that are not under
  version control in Git.
- Although the scroll bar in Git Bash seems to indicate the end of the file is
  reached (and scrolling with the mouse does not work) after opening a file,
  usually a colon (:) will be displayed left to the cursor to indicate that only
  part of the file is shown. Use the down arrow key to see the whole file until
  the end of the file is reached, which is indicated by '(END)'.
- The location of changes is indicated at the top of changed chuncks, as in
  -13,5 +14,9 indicating the line numbers and the character number on that line
  at which the deletion and insertion were made, respectively.


#### Adding a new file ####
To add a file to GitHub that was not there yet, first 'add' it to the local
folder (i.e., on the computer), then let git know it is there by typing (it is
convenient to use tab-completion to select files):
git add filename.extension

If the working directory is NOT the folder where the to-be-added file is in,
the working directory has to be set to that folder first (in the shell: use
cd file/path/to/folder), or the path has to be added in front of the filename.


#### Renaming a file ####
See https://docs.github.com/en/repositories/working-with-files/managing-files/renaming-a-file


#### Deleting a file ####
You might want to move files to a folder 'Archive' instead of deleting them.
To delete a file, find the file on the remote repository (i.e., on the GitHub
website), click the three dots > delete > commit. Use the commit message to
describe why the file was deleted. After that, find the file on the local
repository (i.e., the PC) and delete the file. Then pull.


#### Downloading or cloning a GitHub repository ####
To use code from a repository without pushing changes back to GitHub, download
the repository by using the green 'Code' button, choosing 'Download ZIP', unzip
the downloaded files, and open the '.Rproj' file with the same name as the
repository.

To adjust code from a repository and push changes back to that repository (e.g.,
to work on your project from another machine), clone the GitHub repository: by
using the green button 'Code' in the repository, copy the URL to the clipboard
(i.e., do NOT use 'download ZIP'), create a new R project in RStudio (File > New
Project > Version control > Git), paste the repository URL (something like
https://github.com/username/reposname) in the designated field, select the
desired location, and create the project. The same URL can be used using shell
commands to clone a repository, either with its complete history using
git clone https://github.com/username/reposname
or with only the last commit using
git clone --depth=1 https://github.com/username/reposname


#### Common shell commands ####
For an overview of some shell commands see https://git-scm.com/docs or in the
BASH shell type git config or git help command (replace 'command' by the command
you want help about).

The working directory can be printed using pwd and changed using
cd 'D:/Userdata/PcName/Documents/GIT/SomeFolder'
One and two dots can be used in file paths to indicate the current and parent
directory, respectively.

list files: ls (use ls -a to also show hidden files)
list remote repositories: git remote -v
status of repositories: git status
show user details: git config --global --list
working directory, navigate to: cd ~


#### Note on paths ####
When entering paths in the shell, use forwardslash (/) instead of the Windows-
default backslash (\). If the path you want to specify contains spaces (e.g.,
D:/Userdata/My Account/), use quotes around the path (e.g.,
"D:/Userdata/My Account/"). Tab-completion can be used when entering paths:
single-tab to select an option, double-tab to see multiple options. Dragging a
file into the shell gives the absolute path to that file.


#### See also ####
On git tags and releases:
- https://docs.github.com/en/repositories/releasing-projects-on-github/about-releases
- https://www.toolsqa.com/git/git-tags/
- https://www.jetbrains.com/help/dataspell/use-tags-to-mark-specific-commits.html
